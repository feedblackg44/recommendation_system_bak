function [table_out, second_table, third_table] = MapToTable(map, fit_func, items, period)
    [sorted_order, index85, index95] = SortAndFindIndexes(map, @DailySales);

    for i = 1:numel(sorted_order)
        deal = sorted_order{i};
        if i <= index85
            values = deal.values;
            for j = 1:numel(values)
                item = values{j};
                item('ABC') = 'A';
            end
        elseif i <= index95
            values = deal.values;
            for j = 1:numel(values)
                item = values{j};
                item('ABC') = 'B';
            end
        end
    end

    str_period = sprintf('Can be sold in %d days', period);
    var_names = {
        'Deal ID', 'Item No', 'Item Name', ...
            'Used Minimum Order Quantity', 'Deal Sum', ...
            'Purchase Price', 'Sale Price', 'Profit', ...
            'Average Daily Sales', 'Inventory', ...
            'Can be sold in credit terms', str_period, ...
            'System Suggested Quantity', 'Optimization suggested quantity', ...
            ... 'Sold amount',
            'Days For Sale', 'Item Budget', 'Total Item Sales', ...
            'Total Item Profit', '30 Days Profit', '30 Days Sales', ...
            'Weighted Average 30 Day Profit Margin', ...
            'Effectiveness', 'Average Effectiveness', 'AddToTotal'};
    var_types1 = ["string", "double", "string", "string"];
    var_types2 = repmat("double", 1, length(var_names) - length(var_types1));
    var_types = [var_types1 var_types2];
    table_out = table( ...
        'Size', [0, length(var_names)],...
        'VariableTypes', var_types, ...
        'VariableNames', var_names);

    second_table = table( ...
        'Size', [0, 2], ...
        'VariableTypes', ["string", "double"], ...
        'VariableNames', ["Deal ID", "ABC"]);

    third_table = table( ...
        'Size', [0, 1], ...
        'VariableTypes', "double", ...
        'VariableNames', "Max Period");
    third_table = [third_table; {period}];

    memoDSBD = memoize(@DealSumByDeal);

    deal_names = map.keys;

    for i = 1:length(deal_names)
        deal_name = i;
        cur_deal = map(deal_name);
        item_nums = cur_deal.keys;
        for j = 1:length(item_nums)
            item_num = item_nums{j};
            cur_item = cur_deal(item_num);
            item_num_int = str2num(cur_item('ItemNum'));
            if isempty(item_num_int)
                item_num_int = cur_item('ItemNum');
            end
            cell_to_concat = {...
                cur_item('DealName'), ...
                item_num_int, ...
                cur_item('ItemName'), ...
                cur_item('ItemSize'), ...
                CurrentMOQ(cur_item, 0, memoDSBD), ...
                memoDSBD(cur_item('Deal')), ...
                PurchasePrice(cur_item, 0, memoDSBD), ...
                cur_item('SalePrice'), ...
                Profit(cur_item, 0, memoDSBD), ...
                cur_item('AverageDailySales'), ...
                cur_item('Inventory'), ...
                cur_item('CanBeSoldCredit'), ...
                cur_item('CanBeSoldTotal'), ...
                cur_item('SystemSuggestedQuantity'), ...
                cur_item('OptimizedSuggestedQuantity'), ...
                ... SoldAmount(cur_item), ...
                DaysForSale(cur_item), ...
                ItemBudget(cur_item, 0, memoDSBD), ...
                TotalItemSales(cur_item), ...
                TotalItemProfit(cur_item, memoDSBD), ...
                ThirtyDaysProfit(cur_item, memoDSBD), ...
                ThirtyDaysSales(cur_item), ...
                WeightedAverageThirtyDayProfitMargin(items, cur_item, memoDSBD), ...
                Eff(cur_item, memoDSBD), ...
                fit_func, ...
                cur_item('AddToTotal')};
            table_out = [table_out; cell_to_concat];
        end
        cur_item = cur_deal(item_nums{1});
        second_table = [second_table; {cur_item('DealName'), cur_item('ABC')}];
    end
end